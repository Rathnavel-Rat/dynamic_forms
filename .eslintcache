[{"F:\\frontend\\dynamic_forms\\src\\index.js":"1","F:\\frontend\\dynamic_forms\\src\\reportWebVitals.js":"2","F:\\frontend\\dynamic_forms\\src\\App.js":"3","F:\\frontend\\dynamic_forms\\src\\Components\\menuComponent\\TopBar.jsx":"4","F:\\frontend\\dynamic_forms\\src\\gloabalsMediaProvider.js":"5","F:\\frontend\\dynamic_forms\\src\\Components\\menuComponent\\Menu.jsx":"6","F:\\frontend\\dynamic_forms\\src\\Components\\menuComponent\\Mobilemenu.jsx":"7","F:\\frontend\\dynamic_forms\\src\\store.js":"8","F:\\frontend\\dynamic_forms\\src\\Components\\RootReducer\\RootReducer.js":"9","F:\\frontend\\dynamic_forms\\src\\Components\\RegComponent\\Register.jsx":"10","F:\\frontend\\dynamic_forms\\src\\Components\\Redux\\Register\\reducers.js":"11","F:\\frontend\\dynamic_forms\\src\\Components\\Redux\\Register\\action.js":"12","F:\\frontend\\dynamic_forms\\src\\Components\\Redux\\Register\\types.js":"13","F:\\frontend\\dynamic_forms\\src\\Components\\axiosConfig.jsx":"14","F:\\frontend\\dynamic_forms\\src\\Components\\Redux\\Login\\action.js":"15","F:\\frontend\\dynamic_forms\\src\\Components\\Redux\\Login\\types.js":"16","F:\\frontend\\dynamic_forms\\src\\Components\\Redux\\Login\\reducers.js":"17","F:\\frontend\\dynamic_forms\\src\\Components\\Logincomponent\\Login.jsx":"18","F:\\frontend\\dynamic_forms\\src\\Components\\Redux\\UserDetails\\UserDetails.js":"19","F:\\frontend\\dynamic_forms\\src\\Components\\Redux\\passwordChange\\reducers.js":"20","F:\\frontend\\dynamic_forms\\src\\Components\\Redux\\passwordChange\\types.js":"21","F:\\frontend\\dynamic_forms\\src\\Components\\Forgetpassword\\Password.jsx":"22","F:\\frontend\\dynamic_forms\\src\\Components\\Redux\\passwordChange\\actions.js":"23","F:\\frontend\\dynamic_forms\\src\\Components\\Forgetpassword\\PasswordReset\\PasswordReset.jsx":"24","F:\\frontend\\dynamic_forms\\src\\Components\\Forgetpassword\\PasswordReset\\Passwordreset.jsx":"25","F:\\frontend\\dynamic_forms\\src\\Components\\CreateForms\\Home.jsx":"26","F:\\frontend\\dynamic_forms\\src\\Components\\CreateForms\\Toolbox.jsx":"27","F:\\frontend\\dynamic_forms\\src\\Components\\CreateForms\\ListInput.js":"28","F:\\frontend\\dynamic_forms\\src\\Components\\CreateForms\\ItemDrops.jsx":"29","F:\\frontend\\dynamic_forms\\src\\Components\\PresistedReducers\\PresistedReducers.js":"30","F:\\frontend\\dynamic_forms\\src\\Components\\CreateForms\\protobuf\\Fields_pb.js":"31","F:\\frontend\\dynamic_forms\\src\\Components\\Redux\\DnDItems\\reducers.js":"32","F:\\frontend\\dynamic_forms\\src\\Components\\Redux\\DnDItems\\type.js":"33","F:\\frontend\\dynamic_forms\\src\\Components\\Redux\\DnDItems\\action.js":"34","F:\\frontend\\dynamic_forms\\src\\Components\\CreateForms\\actions.jsx":"35","F:\\frontend\\dynamic_forms\\src\\Components\\CreateForms\\Fields\\RenderFields.jsx":"36","F:\\frontend\\dynamic_forms\\src\\Components\\CreateForms\\Fields\\ConnectForm.js":"37","F:\\frontend\\dynamic_forms\\src\\Components\\CreateForms\\Fields\\EditsFields.jsx":"38","F:\\frontend\\dynamic_forms\\src\\Components\\CreateForms\\Fields\\MemoEditFields.jsx":"39","F:\\frontend\\dynamic_forms\\src\\Components\\CreateForms\\Fields\\ExceptionList.js":"40","F:\\frontend\\dynamic_forms\\src\\Components\\Redux\\CreatedForm\\reducers.js":"41","F:\\frontend\\dynamic_forms\\src\\Components\\Redux\\CreatedForm\\type.js":"42","F:\\frontend\\dynamic_forms\\src\\Components\\Redux\\CreatedForm\\actions.js":"43","F:\\frontend\\dynamic_forms\\src\\Components\\ModalReducer\\ModalReducer.js":"44","F:\\frontend\\dynamic_forms\\src\\Components\\CreateForms\\utils.jsx":"45","F:\\frontend\\dynamic_forms\\src\\Components\\Redux\\currentForm\\currentForm.jsx":"46","F:\\frontend\\dynamic_forms\\src\\Components\\CreateForms\\createdForm.js":"47","F:\\frontend\\dynamic_forms\\src\\Components\\RespondToForm\\RespondToForm.jsx":"48","F:\\frontend\\dynamic_forms\\src\\Components\\Redux\\DeleteForm\\action.js":"49","F:\\frontend\\dynamic_forms\\src\\Components\\Redux\\DeleteForm\\reducer.js":"50","F:\\frontend\\dynamic_forms\\src\\Components\\Redux\\DeleteForm\\type.js":"51","F:\\frontend\\dynamic_forms\\src\\Components\\CreateForms\\Pager.jsx":"52","F:\\frontend\\dynamic_forms\\src\\Components\\Redux\\RespondToForm\\reducers.js":"53","F:\\frontend\\dynamic_forms\\src\\Components\\Redux\\RespondToForm\\type.js":"54","F:\\frontend\\dynamic_forms\\src\\Components\\Redux\\RespondToForm\\actions.js":"55","F:\\frontend\\dynamic_forms\\src\\Components\\FromResponses\\FormResponses.jsx":"56","F:\\frontend\\dynamic_forms\\src\\Components\\Redux\\GetFormReponses\\reducers.js":"57","F:\\frontend\\dynamic_forms\\src\\Components\\Redux\\GetFormReponses\\actions.js":"58","F:\\frontend\\dynamic_forms\\src\\Components\\Redux\\GetFormReponses\\type.js":"59","F:\\frontend\\dynamic_forms\\src\\Components\\Home\\Home.jsx":"60","F:\\frontend\\dynamic_forms\\src\\Components\\FileUploadHandle\\FileUploadHandle.js":"61"},{"size":517,"mtime":1610374072713,"results":"62","hashOfConfig":"63"},{"size":375,"mtime":1610374072713,"results":"64","hashOfConfig":"63"},{"size":503,"mtime":1616777740293,"results":"65","hashOfConfig":"63"},{"size":3061,"mtime":1616865148796,"results":"66","hashOfConfig":"63"},{"size":279,"mtime":1610374072713,"results":"67","hashOfConfig":"63"},{"size":2374,"mtime":1617206437202,"results":"68","hashOfConfig":"63"},{"size":1457,"mtime":1615213741876,"results":"69","hashOfConfig":"63"},{"size":470,"mtime":1611851471097,"results":"70","hashOfConfig":"63"},{"size":1175,"mtime":1616819368615,"results":"71","hashOfConfig":"63"},{"size":3756,"mtime":1616949427078,"results":"72","hashOfConfig":"63"},{"size":925,"mtime":1610717576710,"results":"73","hashOfConfig":"63"},{"size":1357,"mtime":1610975531674,"results":"74","hashOfConfig":"63"},{"size":151,"mtime":1610627074096,"results":"75","hashOfConfig":"63"},{"size":179,"mtime":1612027919385,"results":"76","hashOfConfig":"63"},{"size":1452,"mtime":1614517977853,"results":"77","hashOfConfig":"63"},{"size":135,"mtime":1612089735144,"results":"78","hashOfConfig":"63"},{"size":960,"mtime":1612089736957,"results":"79","hashOfConfig":"63"},{"size":3232,"mtime":1616479738959,"results":"80","hashOfConfig":"63"},{"size":1128,"mtime":1616818812290,"results":"81","hashOfConfig":"63"},{"size":1480,"mtime":1611497098970,"results":"82","hashOfConfig":"63"},{"size":329,"mtime":1611156217890,"results":"83","hashOfConfig":"63"},{"size":2407,"mtime":1610899584920,"results":"84","hashOfConfig":"63"},{"size":2436,"mtime":1616479902798,"results":"85","hashOfConfig":"63"},{"size":2514,"mtime":1610904803294,"results":"86","hashOfConfig":"63"},{"size":2944,"mtime":1616479772916,"results":"87","hashOfConfig":"63"},{"size":3979,"mtime":1616680315724,"results":"88","hashOfConfig":"63"},{"size":3686,"mtime":1616480698021,"results":"89","hashOfConfig":"63"},{"size":1418,"mtime":1617002893406,"results":"90","hashOfConfig":"63"},{"size":7398,"mtime":1616678548170,"results":"91","hashOfConfig":"63"},{"size":335,"mtime":1614950761565,"results":"92","hashOfConfig":"63"},{"size":94888,"mtime":1617201983691,"results":"93","hashOfConfig":"63"},{"size":2902,"mtime":1616680860223,"results":"94","hashOfConfig":"63"},{"size":415,"mtime":1616680280828,"results":"95","hashOfConfig":"63"},{"size":1178,"mtime":1616680280474,"results":"96","hashOfConfig":"63"},{"size":5828,"mtime":1617202097195,"results":"97","hashOfConfig":"63"},{"size":6154,"mtime":1617202500307,"results":"98","hashOfConfig":"63"},{"size":222,"mtime":1613839624447,"results":"99","hashOfConfig":"63"},{"size":737,"mtime":1616345625147,"results":"100","hashOfConfig":"63"},{"size":8745,"mtime":1616435045981,"results":"101","hashOfConfig":"63"},{"size":92,"mtime":1617003171772,"results":"102","hashOfConfig":"63"},{"size":886,"mtime":1614576488184,"results":"103","hashOfConfig":"63"},{"size":251,"mtime":1614785912957,"results":"104","hashOfConfig":"63"},{"size":1857,"mtime":1616479687094,"results":"105","hashOfConfig":"63"},{"size":267,"mtime":1614782134749,"results":"106","hashOfConfig":"63"},{"size":1122,"mtime":1616776057084,"results":"107","hashOfConfig":"63"},{"size":891,"mtime":1615999833115,"results":"108","hashOfConfig":"63"},{"size":6411,"mtime":1617210636277,"results":"109","hashOfConfig":"63"},{"size":5861,"mtime":1617126980025,"results":"110","hashOfConfig":"63"},{"size":1140,"mtime":1616479669262,"results":"111","hashOfConfig":"63"},{"size":734,"mtime":1615998097323,"results":"112","hashOfConfig":"63"},{"size":145,"mtime":1615997290452,"results":"113","hashOfConfig":"63"},{"size":869,"mtime":1616601310473,"results":"114","hashOfConfig":"63"},{"size":541,"mtime":1616777675275,"results":"115","hashOfConfig":"63"},{"size":112,"mtime":1616777335874,"results":"116","hashOfConfig":"63"},{"size":284,"mtime":1616777613418,"results":"117","hashOfConfig":"63"},{"size":1842,"mtime":1616833556096,"results":"118","hashOfConfig":"63"},{"size":1823,"mtime":1616833370574,"results":"119","hashOfConfig":"63"},{"size":664,"mtime":1616832044015,"results":"120","hashOfConfig":"63"},{"size":298,"mtime":1616831770350,"results":"121","hashOfConfig":"63"},{"size":10057,"mtime":1617128700931,"results":"122","hashOfConfig":"63"},{"size":83,"mtime":1617009716494,"results":"123","hashOfConfig":"63"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},"m3no2f",{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"126"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"126"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"126"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"126"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"126"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"209"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"126"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229","usedDeprecatedRules":"126"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"126"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"126"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"126"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"F:\\frontend\\dynamic_forms\\src\\index.js",[],["259","260"],"F:\\frontend\\dynamic_forms\\src\\reportWebVitals.js",[],"F:\\frontend\\dynamic_forms\\src\\App.js",[],"F:\\frontend\\dynamic_forms\\src\\Components\\menuComponent\\TopBar.jsx",[],"F:\\frontend\\dynamic_forms\\src\\gloabalsMediaProvider.js",[],"F:\\frontend\\dynamic_forms\\src\\Components\\menuComponent\\Menu.jsx",[],"F:\\frontend\\dynamic_forms\\src\\Components\\menuComponent\\Mobilemenu.jsx",[],"F:\\frontend\\dynamic_forms\\src\\store.js",[],"F:\\frontend\\dynamic_forms\\src\\Components\\RootReducer\\RootReducer.js",[],"F:\\frontend\\dynamic_forms\\src\\Components\\RegComponent\\Register.jsx",[],"F:\\frontend\\dynamic_forms\\src\\Components\\Redux\\Register\\reducers.js",[],"F:\\frontend\\dynamic_forms\\src\\Components\\Redux\\Register\\action.js",[],"F:\\frontend\\dynamic_forms\\src\\Components\\Redux\\Register\\types.js",[],"F:\\frontend\\dynamic_forms\\src\\Components\\axiosConfig.jsx",[],"F:\\frontend\\dynamic_forms\\src\\Components\\Redux\\Login\\action.js",[],"F:\\frontend\\dynamic_forms\\src\\Components\\Redux\\Login\\types.js",[],"F:\\frontend\\dynamic_forms\\src\\Components\\Redux\\Login\\reducers.js",[],"F:\\frontend\\dynamic_forms\\src\\Components\\Logincomponent\\Login.jsx",[],"F:\\frontend\\dynamic_forms\\src\\Components\\Redux\\UserDetails\\UserDetails.js",[],"F:\\frontend\\dynamic_forms\\src\\Components\\Redux\\passwordChange\\reducers.js",[],"F:\\frontend\\dynamic_forms\\src\\Components\\Redux\\passwordChange\\types.js",[],"F:\\frontend\\dynamic_forms\\src\\Components\\Forgetpassword\\Password.jsx",[],"F:\\frontend\\dynamic_forms\\src\\Components\\Redux\\passwordChange\\actions.js",[],"F:\\frontend\\dynamic_forms\\src\\Components\\Forgetpassword\\PasswordReset\\PasswordReset.jsx",["261","262","263"],"F:\\frontend\\dynamic_forms\\src\\Components\\Forgetpassword\\PasswordReset\\Passwordreset.jsx",[],"F:\\frontend\\dynamic_forms\\src\\Components\\CreateForms\\Home.jsx",["264"],"import React from 'react'\r\nimport { DragDropContext} from 'react-beautiful-dnd'\r\nimport { useSelector,useDispatch } from 'react-redux'\r\nimport {  Grid, } from 'semantic-ui-react'\r\nimport ItemDrops, {Pages} from './ItemDrops'\r\nimport Toolbox from './Toolbox'\r\nimport {SetDragItem, Swap_Between_Page} from '../Redux/DnDItems/action'\r\nimport { items as Tools } from './ListInput'\r\nimport { GetAction } from './actions'\r\nimport Pager from \"./Pager\";\r\n\r\n\r\nconst reorder = (list, startIndex, endIndex) => {\r\n    const result = Array.from(list);\r\n    const [removed] = result.splice(startIndex, 1);\r\n    result.splice(endIndex, 0, removed);\r\n\r\n    return result;\r\n};\r\n\r\nconst atPosition = (ExistingList, destinationIndex,Newdata) => {\r\n    const destClone = Array.from(ExistingList);\r\n    destClone.splice(destinationIndex, 0,Newdata);\r\n    return destClone;\r\n}\r\n\r\nconst move = (source, destination, droppableSource, droppableDestination) => {\r\n    const sourceClone = Array.from(source);\r\n    const destClone = Array.from(destination);\r\n    const [removed] = sourceClone.splice(droppableSource.index, 1);\r\n\r\n    destClone.splice(droppableDestination.index, 0, removed);\r\n\r\n    const result = {};\r\n    result[\"source\"] = sourceClone;\r\n    result[\"destination\"] =destClone;\r\n\r\n    return result;\r\n};\r\n\r\n\r\n\r\nfunction Home() {\r\n\r\n    const  DnD= useSelector(state => state.dnd)\r\n    const dispatch = useDispatch()\r\n    const actions = new GetAction();\r\n    const selector=useSelector(state=>state.currentForm)\r\n\r\n\r\n    const dragEndCall=(result)=>{\r\n        let data;\r\n        const { source, destination,draggableId} = result;\r\n        if (!destination) {\r\n            return;\r\n        }\r\n\r\n        if(source.droppableId!==destination.droppableId && source.droppableId===\"toolbox\"){\r\n            if(draggableId===\"inputemail\")\r\n                {\r\n                    data = actions[String(Tools.find(e=>e.id===draggableId).action)](true);\r\n                }\r\n            else\r\n                {\r\n                    data = actions[String(Tools.find(e => e.id === draggableId).action)]();\r\n                }\r\n               const list=atPosition(DnD.formPage[destination.droppableId.toString()].page.getFieldsList(),destination.index,data)\r\n            dispatch(SetDragItem({id:destination.droppableId,list:list}))\r\n\r\n                    \r\n        }\r\n        else if(source.droppableId!==destination.droppableId){\r\n           const result= move(DnD.formPage[source.droppableId.toString()].page.getFieldsList(),DnD.formPage[destination.droppableId.toString()].page.getFieldsList(),source,destination)\r\n            dispatch(Swap_Between_Page({sourceid:source.droppableId,destinationid:destination.droppableId,source:result[\"source\"],destination:result[\"destination\"]}))\r\n        }\r\n        if(source.droppableId===destination.droppableId){\r\n            const list=reorder(DnD.formPage[destination.droppableId.toString()].page.getFieldsList(),source.index,destination.index)\r\n            dispatch(SetDragItem({id:destination.droppableId,list:list}))\r\n        }\r\n       \r\n        \r\n    }\r\n    return (\r\n        <div>\r\n            <Grid.Row>\r\n                <h1>{selector.name}</h1>\r\n            </Grid.Row>\r\n            <DragDropContext onDragEnd={dragEndCall} >\r\n            <Grid celled stackable doubling >\r\n                <Grid.Row  stretched columns={3}>\r\n                    \r\n                <Grid.Column  computer={3} >\r\n                     {/*  toolbox*/ }\r\n                    <Toolbox/>\r\n                 </Grid.Column > \r\n            \r\n                 <Grid.Column  computer={8} >     \r\n                     {/* WA*/ }              \r\n                    \r\n                    <ItemDrops/>\r\n\r\n                </Grid.Column>\r\n\r\n                    <Grid.Column  computer={3} >\r\n\r\n                       <Pager/>\r\n\r\n                    </Grid.Column>\r\n             </Grid.Row>\r\n          </Grid>\r\n          </DragDropContext>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home\r\n\r\n\r\n","F:\\frontend\\dynamic_forms\\src\\Components\\CreateForms\\Toolbox.jsx",[],"F:\\frontend\\dynamic_forms\\src\\Components\\CreateForms\\ListInput.js",[],"F:\\frontend\\dynamic_forms\\src\\Components\\CreateForms\\ItemDrops.jsx",["265","266","267","268","269","270"],"import React,{memo,useReducer,useEffect} from 'react'\r\nimport { Draggable, Droppable } from 'react-beautiful-dnd'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport {Modal, Segment, Icon, Label, Form, Header, Container,} from 'semantic-ui-react'\r\nimport {\r\n    DeleteAllElementsInAPage,\r\n    DeleteAnDrags,\r\n    DeleteAPage,\r\n    LoadPage,\r\n    RemoveAllDrags,\r\n    SetDragItem\r\n} from '../Redux/DnDItems/action'\r\nimport {ListFields,ListPageForm} from './protobuf/Fields_pb'\r\nimport { RenderProto } from './Fields/RenderFields'\r\nimport {EditRenderField} from \"./Fields/EditsFields\";\r\nimport { useForm, useFormContext, FormProvider, Controller } from \"react-hook-form\";\r\nimport Axios from \"../axiosConfig\";\r\nimport {ExceptionList} from \"./Fields/ExceptionList\";\r\nimport {modalReducer} from \"../ModalReducer/ModalReducer\";\r\nimport {base64ToArrayBuffer,bufferToBase64} from \"./utils\";\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction ItemDrops() {\r\n     const  DnD= useSelector(state => state.dnd)\r\n     const dispatch = useDispatch()\r\n     const currentForm=useSelector(state=>state.currentForm)\r\n     const[state,dispatches]=useReducer(modalReducer,{isOpen:false})\r\n\r\n     useEffect(()=>{\r\n        const a= base64ToArrayBuffer(currentForm.bindata)\r\n         const data = {};\r\n         ListPageForm.deserializeBinary(a).getPageList().forEach(e=>(\r\n             data[e.getFormid().toString()]={id:e.getFormid(),page:e}\r\n         ))\r\n        dispatch(LoadPage(data))\r\n     },[])\r\n\r\n  const onSave=()=>{\r\n       const nPageListForm = new  ListPageForm()\r\n       const  array=[]\r\n       Object.entries(DnD.formPage).map(e=>(\r\n           array.push(e[1].page)\r\n       ))\r\n       nPageListForm.setPageList(array)\r\n       const serialized=nPageListForm.serializeBinary()\r\n       const data={\"data\":bufferToBase64(serialized),\"form_id\":currentForm.id}\r\n       Axios().post(\"dynamicforms/saveform\",data).then(e=>{dispatches({type:\"OPEN\"});}).catch(er=>{console.log(er)})\r\n  }\r\n\r\n    return (\r\n        <Segment secondary  stacked>\r\n          <Segment>\r\n          <Label size={50} onClick={()=>dispatch(RemoveAllDrags())} color=\"red\" attached=\"top right\" style={{paddingRight:\"18px\",height:\"10Ppx\"}} icon=\"remove\"   removeIcon />\r\n          <Header> Drag Items from toolbar and place it below  </Header>\r\n          <Label size={50} onClick={()=>onSave()} color=\"green\" attached=\"top left\" style={{paddingRight:\"18px\",height:\"10Ppx\"}} icon=\"save\"   />\r\n          </Segment>\r\n            {\r\n              Object.entries(DnD.formPage).map(e=>(\r\n\r\n                 <Segment >\r\n                     {console.log(DnD.formPage,\"kkk0\")}\r\n                  <EachPage item={e[1].page} dispatch={dispatch}/>\r\n\r\n                 </Segment>)\r\n              )\r\n            }\r\n            <SavedModal open={state.isOpen} dis={dispatches}/>\r\n      </Segment>\r\n       \r\n    )\r\n}\r\n\r\n\r\nexport default ItemDrops\r\n\r\n\r\nconst EachPage=({item,dispatch})=>{\r\n  console.log(item,\"kkk\")\r\n    return(\r\n        <Droppable  isCombineEnabled={true}  style={{height:\"500px\"}} droppableId={item.getFormid()} >\r\n\r\n            {(provided,snapshot )=>(\r\n\r\n                <div ref={provided.innerRef} {...provided.droppableProps} isDraggingOver={snapshot.isDraggingOver}  >\r\n                    <Segment  widths=\"equal\"  style={{height:\"max-content\",minHeight:\"450px\", backgroundColor:\"#fff\"}}>\r\n                        <Label size={50} onClick={()=>{dispatch(DeleteAllElementsInAPage({id:item.getFormid()}))}} color=\"red\" attached=\"top right\" style={{paddingRight:\"18px\",height:\"10Ppx\"}} icon=\"remove\"   removeIcon />\r\n\r\n\r\n                        <DropList snapshot={snapshot} formId={item.getFormid()} items={item.getFieldsList()}/>\r\n                        <Label size={50} onClick={()=>{dispatch(DeleteAPage({id:item.getFormid()}))}} color=\"red\" attached=\"bottom right\" style={{paddingRight:\"18px\",height:\"10Ppx\"}} icon=\"trash\"   removeIcon />\r\n                    </Segment>\r\n\r\n                    {provided.placeholder}\r\n                </div>\r\n\r\n\r\n            )}\r\n\r\n        </Droppable>\r\n    )\r\n}\r\n\r\nfunction  DropList({snapshot,items,formId}) {\r\n     const methods = useForm();\r\n  return(\r\n      <FormProvider {...methods} >\r\n    <Form divided={snapshot.isDragging} verticalAlign='middle'>\r\n\r\n        {items.map((item,i)=>{\r\n              \r\n            return (\r\n             \r\n             <Draggable key={item.getUid()} draggableId={item.getUid()} index={i}>\r\n            {(provided, snapshot) => (\r\n                          <div ref={provided.innerRef} key={item.getUid()} \r\n                            {...provided.draggableProps} isDragging={snapshot.isDraggingOver}\r\n                            isDragging={snapshot.isDraggingOver}   style={provided.draggableProps.style}  >\r\n                              \r\n                                 <EachItem formId={formId} item={item} provided={provided}/>\r\n                             \r\n                         </div>\r\n                      \r\n        )}  \r\n       \r\n      </Draggable>\r\n   \r\n      )})}\r\n                  \r\n    </Form>\r\n      </FormProvider>\r\n          )}\r\n\r\n\r\nconst  EachItem=({item,provided,formId}) =>{\r\n\r\n    const nRenderProto = new RenderProto();\r\n    const field = nRenderProto[String(item.getRenderFunc())](item);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n  return (\r\n                               <Segment textAlign=\"left\"  secondary  >\r\n                            \r\n                                 <Label color=\"orange\" attached=\"top left\" ribbon style={{width:\"min-content\"}} icon=\"align justify\" {...provided.dragHandleProps} />\r\n                                \r\n                                 <Label  attached=\"bottom right\" onClick={()=>{dispatch(DeleteAnDrags({formId:formId,elementId:item.getUid()}))}} color=\"red\" style={{width:\"min-content\"}} icon=\"trash alternate\"  />  <br></br>\r\n                                   <CustomModal item={item}/>\r\n                                   {field}\r\n                                 \r\n                                </Segment >\r\n  )\r\n}\r\n\r\n\r\n\r\nconst CustomModal=memo(({item})=>{\r\n\r\n    const[state,dispatches]=useReducer(modalReducer,{isOpen:false,item:item})\r\n    const nEditRenderField=new EditRenderField()\r\n    let render=null;\r\n    if (!ExceptionList.includes(String(item.getRenderFunc())) )\r\n        render= nEditRenderField[String(item.getRenderFunc())](item)\r\n\r\n    return (\r\n        <Modal\r\n            closeIcon\r\n            open={state.isOpen}\r\n            onClose={() => dispatches({type:\"CLOSE\"})}\r\n            trigger={render!==null?<Label onClick={()=>dispatches({type:\"OPEN\"})} attached=\"top right\"  color=\"yellow\" style={{width:\"min-content\"}} icon=\"edit\"  />:null}>\r\n            <Modal.Header>Make Your Changes</Modal.Header>\r\n            <Modal.Content>\r\n                {render}\r\n            </Modal.Content>\r\n        </Modal>\r\n    )\r\n\r\n})\r\n\r\nconst SavedModal=memo(({open,dis})=>{\r\n    return (\r\n        <Modal\r\n            basic\r\n            size={\"mini\"}\r\n            closeIcon\r\n            open={ open}\r\n            onClose={() => dis({type:\"CLOSE\"})}>\r\n            <Modal.Header><Icon  color=\"green\" name=\"save \"/>Saved Successfully</Modal.Header>\r\n            <Modal.Content >\r\n                <Container textAlign={\"center\"}>\r\n                 <Icon name={\"check circle\"} size={\"huge\"} color=\"green\"/>\r\n             </Container>\r\n            </Modal.Content>\r\n        </Modal>\r\n    )\r\n\r\n\r\n} )\r\n","F:\\frontend\\dynamic_forms\\src\\Components\\PresistedReducers\\PresistedReducers.js",[],"F:\\frontend\\dynamic_forms\\src\\Components\\CreateForms\\protobuf\\Fields_pb.js",[],"F:\\frontend\\dynamic_forms\\src\\Components\\Redux\\DnDItems\\reducers.js",[],"F:\\frontend\\dynamic_forms\\src\\Components\\Redux\\DnDItems\\type.js",[],"F:\\frontend\\dynamic_forms\\src\\Components\\Redux\\DnDItems\\action.js",[],"F:\\frontend\\dynamic_forms\\src\\Components\\CreateForms\\actions.jsx",["271"],"import { createFieldUUID } from \"./utils\"\r\nimport {Field,Radio,Number,Text,validator,Checkbox,DropDown,Date,Label,Range,Image,TextArea,FileUpload} from \"./protobuf/Fields_pb\"\r\n\r\nexport class GetAction {\r\n    constructor() {\r\n        this.GetRadio = function () {\r\n            const nRadio = new Radio()\r\n            nRadio.setNumofoption(4)\r\n            nRadio.addValues(\"one\")\r\n            nRadio.addValues( \"two\")\r\n            nRadio.addValues(\"three\")\r\n            nRadio.addValues( \"four\")\r\n            nRadio.setLabel(\"enter the question\")\r\n\r\n            const nField = new Field()\r\n            nField.setUid(createFieldUUID())\r\n            nField.setRadio(nRadio)\r\n            nField.setIsRequired(false)\r\n            nField.setRenderFunc('RenderRadio')\r\n            return nField;\r\n        }\r\n        this.GetNumber=function () {\r\n            const  nNumber=new Number()\r\n            nNumber.setLabel(\"enter the min and max for number Field\");\r\n            nNumber.setMin(0)\r\n            nNumber.setMax(100)\r\n\r\n            const nField = new Field()\r\n            nField.setUid(createFieldUUID())\r\n            nField.setNumber(nNumber)\r\n            nField.setIsRequired(false)\r\n            nField.setRenderFunc('RenderNumber')\r\n            return nField;\r\n\r\n        }\r\n      this.GetText =function (isEmail) {\r\n          const nField = new Field()\r\n          nField.setUid(createFieldUUID())\r\n            const nText=new Text()\r\n          const valid = new validator();\r\n            valid.setValidation(\"true\")\r\n            valid.setError(\"not to be empty\")\r\n\r\n          const valid1 = new validator();\r\n            valid1.setValidation(\"^[A-Z0-9._%+-]+@[A-Z0-9.-]+.[A-Z]{2,4}$\")\r\n            valid1.setError(\"email id required\")\r\n            nText.getValidMap().set(\"required\",valid);\r\n            if(isEmail) {\r\n                nText.getValidMap().set(\"pattern\", valid1)\r\n                nText.setType(\"email\")\r\n                nText.setLabel(\"E-mail\")\r\n                nField.setRenderFunc('RenderEmail')\r\n            }\r\n            else{\r\n                nText.setType(\"Text\")\r\n                nText.setLabel(\"Enter your Text\")\r\n                nField.setRenderFunc('RenderText')\r\n            }\r\n\r\n            nField.setText(nText)\r\n            nField.setIsRequired(false)\r\n\r\n            return nField;\r\n\r\n      }\r\n      this.GetCheckBox=function () {\r\n            const nChekBox=new Checkbox()\r\n            nChekBox.setLabel(\"Enter you check box value\")\r\n            const nField = new Field()\r\n            nField.setUid(createFieldUUID())\r\n            nField.setCheckbox(nChekBox)\r\n            nField.setRenderFunc('RenderCheckBox')\r\n            nField.setIsRequired(false)\r\n            return nField;\r\n\r\n      }\r\n      this.GetDrop=function () {\r\n                const nDropDown=new DropDown()\r\n                nDropDown.setLabel(\"Edit ur own text\")\r\n                nDropDown.addItems(\"one\")\r\n                nDropDown.addItems(\"two\")\r\n                const nField = new Field()\r\n                nField.setUid(createFieldUUID())\r\n                nField.setDropdown(nDropDown)\r\n                nField.setRenderFunc('RenderDropDown')\r\n                nField.setIsRequired(false)\r\n            return nField;\r\n      }\r\n      this.GetDate=function () {\r\n                const nDate=new Date()\r\n                nDate.setLabel(\"Choose Your Date\")\r\n                const nField = new Field()\r\n                nField.setUid(createFieldUUID())\r\n                nField.setDate(nDate)\r\n                nField.setRenderFunc('RenderDate')\r\n                nField.setIsRequired(false)\r\n          return nField;\r\n\r\n      }\r\n      this.GetLabel=function () {\r\n            const  nlabel =new Label()\r\n            nlabel.setValue(\"Enter some label text\")\r\n            const nField = new Field()\r\n            nField.setUid(createFieldUUID())\r\n            nField.setLabel(nlabel)\r\n            nField.setRenderFunc('RenderLabel')\r\n          nField.setIsRequired(false)\r\n\r\n        return nField;\r\n      }\r\n      this.GetRange=function(){\r\n        const nRange =new Range()\r\n        nRange.setFrom(0)\r\n        nRange.setTo(100)\r\n        nRange.setMultiples(1)\r\n        nRange.setLabel(\"Enter the label or text for Range\")\r\n        const nField = new Field()\r\n        nField.setUid(createFieldUUID())\r\n        nField.setRange(nRange)\r\n        nField.setRenderFunc('RenderRange')\r\n          nField.setIsRequired(false)\r\n    \r\n        return nField;\r\n      }\r\n      this.GetImage=function () {\r\n            const nImage=new Image()\r\n            nImage.setImagelabel(\"Enter Your Image Description\");\r\n            nImage.setImageurl(\"https://react.semantic-ui.com/images/wireframe/image.png\")\r\n            nImage.setSize(\"small\")\r\n            nImage.setIsRounded(false)\r\n            nImage.setIsCircular(false)\r\n            const nField = new Field()\r\n            nField.setUid(createFieldUUID())\r\n            nField.setImage(nImage)\r\n            nField.setRenderFunc('RenderImage')\r\n          nField.setIsRequired(false)\r\n          return nField;\r\n\r\n\r\n      }\r\n     this.GetTextArea=function(){\r\n        const nTextArea=new TextArea()\r\n         nTextArea.setLabel(\"Enter your Label here\")\r\n         const nField = new Field()\r\n         nField.setUid(createFieldUUID())\r\n         nField.setTextarea(nTextArea)\r\n         nField.setRenderFunc('RenderTextArea')\r\n         nField.setIsRequired(false)\r\n         return nField;\r\n     }\r\n     this.GetFileUpload=function () {\r\n        const nFileUpload=new FileUpload()\r\n         nFileUpload.setLabel(\"Enter ur your Label here\")\r\n         const nfield=new Field()\r\n         nfield.setUid(createFieldUUID()+\"file\")\r\n         nfield.setFileupload(nFileUpload)\r\n         nfield.setRenderFunc(\"RenderFileUpload\")\r\n         nfield.setIsRequired(true)\r\n         return nfield;\r\n\r\n\r\n     }\r\n\r\n    }\r\n}\r\n\r\n\r\n","F:\\frontend\\dynamic_forms\\src\\Components\\CreateForms\\Fields\\RenderFields.jsx",["272","273","274","275","276"],"import React from 'react'\r\nimport {Checkbox, Form, FormCheckbox, Image, Label, Radio, Segment} from 'semantic-ui-react';\r\nimport FormInput from \"semantic-ui-react/dist/commonjs/collections/Form/FormInput\";\r\nimport {ConnectForm} from \"./ConnectForm\";\r\nimport {Controller} from \"react-hook-form\";\r\n\r\n\r\n\r\nexport class RenderProto{\r\n  constructor(){\r\n    this.RenderRadio= function(item){\r\n      const arr=item.getRadio().getValuesList();\r\n\r\n    return(\r\n        <ConnectForm>\r\n            {({ register,setValue,trigger,control })=>(\r\n\r\n                <Form.Field>\r\n                    <Label content={item.getRadio().getLabel()} />\r\n                    {\r\n                        arr.map((e,i)=>(\r\n                            <div><input required={item.getIsRequired()}  ref={register({})} type=\"radio\" key={i}  value={e}   name={item.getUid()}/>\r\n                                <label htmlFor={e}>{e}</label>\r\n                            </div>\r\n                            ))\r\n\r\n                    }\r\n\r\n                </Form.Field> )}\r\n        </ConnectForm>\r\n\r\n\r\n    )\r\n    };\r\n    this.RenderNumber=function (item) {\r\n      return(\r\n          <ConnectForm>\r\n              {({register,control})=>(\r\n          <Controller control={control}  required={item.getIsRequired()}   defaultValue=\"\" as={FormInput} ref={register({})}  width={5} label={item.getNumber().getLabel()}    name={item.getUid()} type=\"number\" min={item.getNumber().getMin()} max={item.getNumber().getMax()}/>\r\n              )}\r\n          </ConnectForm>\r\n      )\r\n              }\r\n    this.RenderText=function(item){\r\n\r\n        return(\r\n            <ConnectForm>\r\n                {({register,control})=>(\r\n                       <Controller control={control}   defaultValue=\"\" as={FormInput} width={5} name={item.getUid()} label={item.getText().getLabel()}  ref={register({required:{value: item.getIsRequired(),message:\"\" }})}   />\r\n\r\n                )}\r\n            </ConnectForm>\r\n        )\r\n    }\r\n    this.RenderEmail=function (item) {\r\n        {\r\n            return(\r\n                <ConnectForm>\r\n                    {({register,control})=>(\r\n                        <Controller control={control} as={Form.Input} defaultValue=\"\" type=\"email\" width={5} name={item.getUid()} label={item.getText().getLabel()}  ref={register({required:{value: item.getIsRequired(),message:\"\" }})}   />\r\n                    )}\r\n                </ConnectForm>\r\n            )\r\n        }\r\n\r\n    }\r\n    this.RenderCheckBox=function (item) {\r\n\r\n        return(\r\n          <ConnectForm>\r\n              {({register,trigger,setValue})=>(\r\n                  <Form.Checkbox\r\n                      name={item.getUid()}\r\n                      ref={register({name:item.getUid()})}\r\n                      label=\"I agree to the Terms and Conditions\"\r\n                      onChange={async (e, { name, checked }) => {\r\n                          setValue(name, checked);\r\n                          await trigger({ name });\r\n                      }}\r\n                  />\r\n\r\n                  )}\r\n          </ConnectForm>\r\n        )\r\n\r\n    }\r\n    this.RenderDropDown=function (item) {\r\n        let arr=[];\r\n        item.getDropdown().getItemsList().forEach(e=>{\r\n             arr.push({key:e,text:e,value:e})\r\n            }\r\n        );\r\n\r\n\r\n        return(\r\n            <ConnectForm>\r\n                {({register,control,setValue,trigger})=>(\r\n                <Form.Select defaultValue=\"\" width={5} ref={register({name:item.getUid(),required:{value: item.getIsRequired(),message:\"\" }})}\r\n                             onChange={async (e, { name, value }) => {\r\n                                 setValue(name, value);\r\n                                 await trigger({ name });\r\n                             }}\r\n                             label={item.getDropdown().getLabel()} type=\"select\"  options={arr} name={item.getUid()}/>)}\r\n            </ConnectForm>\r\n        )\r\n\r\n    }\r\n    this.RenderDate= function(item){\r\n\r\n        return(\r\n            <ConnectForm>\r\n                {({register,control})=>(\r\n                <Controller control={control} as={Form.Input} defaultValue=\"\"  width={5}  ref={register({required:{value: item.getIsRequired(),message:\"\" }})}  label={item.getDate().getLabel()} type=\"Date\" name={item.getUid()} />)}\r\n            </ConnectForm>\r\n        )\r\n    }\r\n\r\n    this.RenderLabel=function (item) {\r\n        return(\r\n            <Form.Field>\r\n                <Label content={item.getLabel().getValue()}/>\r\n            </Form.Field>\r\n        )\r\n\r\n    }\r\n    this.RenderRange=function(item){\r\n        return(\r\n            <div>\r\n                 <Label content={item.getRange().getLabel()}/>\r\n                 <input  name={item.getUid()} min={item.getRange().getFrom()} max={item.getRange().getTo()} multiple={item.getRange().getMultiples()} />\r\n            </div>\r\n        )\r\n    }\r\n    this.RenderImage=function(item){\r\n        return(\r\n            <div>\r\n                <Label content={item.getImage().getImagelabel()}/>\r\n                <Image  size={item.getImage().getSize()} src={item.getImage().getImageurl()} rounded={item.getImage().setIsRounded()} circular={item.getImage().setIsCircular()}/>\r\n            </div>\r\n        )\r\n    }\r\n    this.RenderTextArea=function(item){\r\n        return(\r\n            <div>\r\n                <ConnectForm>\r\n                    {({register,control})=>(\r\n                        <Controller control={control} as={Form.TextArea} defaultValue=\"\"  width={10}  ref={register({required:{value: item.getIsRequired(),message:\"\" }})}  label={item.getTextarea().getLabel()}  name={item.getUid()} />)}\r\n                </ConnectForm>\r\n            </div>\r\n        )\r\n    }\r\n    this.RenderFileUpload=function(item){\r\n\r\n        return(\r\n            <div>\r\n                <Label content={item.getFileupload().getLabel()}/>\r\n                <ConnectForm>\r\n                    {({register,control})=>(\r\n                        <input type=\"file\" defaultValue=\"\"  width={10}  ref={register({required:{value: item.getIsRequired(),message:\"\" }})}   name={item.getUid()} />)}\r\n                </ConnectForm>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n\r\n  }\r\n}\r\n\r\n\r\n\r\n","F:\\frontend\\dynamic_forms\\src\\Components\\CreateForms\\Fields\\ConnectForm.js",["277","278"],"import React, { memo, } from \"react\";\r\nimport { useFormContext} from \"react-hook-form\";\r\nexport const ConnectForm = ({ children }) => {\r\n    const methods = useFormContext();\r\n\r\n    return children({ ...methods });\r\n};","F:\\frontend\\dynamic_forms\\src\\Components\\CreateForms\\Fields\\EditsFields.jsx",[],"F:\\frontend\\dynamic_forms\\src\\Components\\CreateForms\\Fields\\MemoEditFields.jsx",["279"],"import React, {memo, useReducer, useState} from 'react'\r\nimport {useForm} from \"react-hook-form\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {DragEdit} from \"../../Redux/DnDItems/action\";\r\nimport {Form, Portal, Container, List, Icon, Image} from \"semantic-ui-react\";\r\n\r\nexport const MemoText=memo(({item})=>{\r\n    const {register,handleSubmit}=useForm();\r\n    const [PortalOpen,setPortalOpen]=useState(false);\r\n    const dispatch=useDispatch();\r\n    const done=(e)=>{\r\n        item.getText().setLabel(e.label)\r\n        dispatch(DragEdit())\r\n        setPortalOpen(false)\r\n\r\n    }\r\n    return(\r\n        <div>\r\n            <Form onSubmit={handleSubmit(done)}>\r\n                <input ref={register({ required: true})} required name=\"label\" placeholder={ \"current value:\"+item.getText().getLabel()}  />\r\n                <input type=\"submit\"  value=\"Save\"/>\r\n                <Portal open={PortalOpen} ><h1>✔</h1> </Portal>\r\n            </Form>\r\n        </div>)\r\n})\r\n\r\nexport const Memolabel=memo(({item})=>{\r\n    const {register,handleSubmit}=useForm();\r\n    const [PortalOpen,setPortalOpen]=useState(false);\r\n    const dispatch=useDispatch();\r\n    const done=(e)=>{\r\n     item.getLabel().setValue(e.label)\r\n        dispatch(DragEdit())\r\n        setPortalOpen(false)\r\n\r\n    }\r\n\r\n    return(\r\n        <div>\r\n        <Form onSubmit={handleSubmit(done)}>\r\n        <input ref={register({ required: true})} required name=\"label\" placeholder={ \"current value:\"+item.getLabel().getValue()}  />\r\n        <input type=\"submit\"  value=\"Save\"/>\r\n            <Portal open={PortalOpen} ><h1>✔</h1> </Portal>\r\n\r\n        </Form>\r\n    </div>)\r\n})\r\n\r\nexport const MemoRadio=memo(function({item}){\r\n    const {register,reset,handleSubmit}=useForm();\r\n    const dispatch=useDispatch();\r\n    const Radio=item.getRadio()\r\n    const AddValue=(e)=>{\r\n        Radio.setLabel(e.label)\r\n        Radio.addValues(e.val)\r\n        reset()\r\n        dispatch(DragEdit())\r\n    }\r\n    const DeleteAnItemFromList=  (pos) => {\r\n        const s = [...Radio.getValuesList().slice(0, pos).concat(Radio.getValuesList().slice(pos + 1, item.getRadio().getValuesList().length))]\r\n        item.getRadio().clearValuesList()\r\n        item.getRadio().setValuesList(s)\r\n        reset()\r\n         dispatch(DragEdit())\r\n    }\r\n      return(\r\n          <div>\r\n              <Form onSubmit={handleSubmit(AddValue)}>\r\n                  <input name=\"label\" defaultValue={Radio.getLabel()}  ref={register()}   placeholder={\"current value:\"+Radio.getLabel().toString()}/>\r\n              <Container>\r\n                  <List >\r\n                      {item.getRadio().getValuesList().map((e,i)=>(\r\n                          <List.Item key={i} >\r\n                              <Icon name='remove' onClick={()=>DeleteAnItemFromList(i)} color=\"blue\"/>\r\n                              <List.Content>\r\n                                  {e}\r\n                              </List.Content>\r\n\r\n                          </List.Item>\r\n                      ))}\r\n                  </List>\r\n              </Container>\r\n\r\n                  <input ref={register({ required: true})} required name=\"val\" placeholder=\"Enter a value to add to list\"  />\r\n                  <input type=\"submit\"  value=\"Save\"/>\r\n              </Form>\r\n          </div>\r\n      )\r\n})\r\n\r\nexport  const MemoNumber=memo(({item})=>{\r\n    const {register,reset,handleSubmit}=useForm();\r\n    const dispatch=useDispatch();\r\n    const Number=item.getNumber();\r\n    const save=(e)=>{\r\n        Number.setLabel(e.label)\r\n        Number.setMax(e.maximum)\r\n        Number.setMin(e.minimum)\r\n        reset()\r\n        dispatch(DragEdit())\r\n    }\r\n    return(\r\n        <div>\r\n            <Form onSubmit={handleSubmit(save)}>\r\n                <input ref={register()} required name=\"label\"  defaultValue={Number.getLabel().toString()}  />\r\n                <input placeholder=\"min\" defaultValue={`${Number.getMin()}`} name=\"minimum\" type=\"number\" ref={register({required:true})}   />\r\n                <input placeholder=\"max\" defaultValue={`${Number.getMax()}`} name=\"maximum\" type=\"number\" ref={register({required:true})}   />\r\n                <input type=\"submit\" />\r\n            </Form>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport  const MemoCheckbox=({item})=>{\r\n    const {register,handleSubmit}=useForm();\r\n    const dispatch=useDispatch();\r\n    const CheckBox=item.getCheckbox();\r\n    const Save=(e)=>{\r\n        CheckBox.setLabel(e.checkbox)\r\n        dispatch(DragEdit())\r\n    }\r\n    return(\r\n        <div>\r\n            <Form onSubmit={handleSubmit(Save)}>\r\n                <input type=\"text\" defaultValue={CheckBox.getLabel()} placeholder={\"current value:\"+CheckBox.getLabel().toString()}  name=\"checkbox\" ref={register({required:true})}/>\r\n                <input type=\"submit\"/>\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\nexport  const MemoDropDown=({item})=> {\r\n    const {register, reset,handleSubmit} = useForm()\r\n    const dispatch = useDispatch();\r\n    const DropDown = item.getDropdown();\r\n\r\n    const AddValue=(e)=>{\r\n        DropDown.setLabel(e.dropdownLabel)\r\n        DropDown.addItems(e.val)\r\n        reset()\r\n        dispatch(DragEdit())\r\n    }\r\n    const DeleteAnItemFromList=  (pos) => {\r\n        const s = [...DropDown.getItemsList().slice(0, pos).concat(DropDown.getItemsList().slice(pos + 1, DropDown.getItemsList().length))]\r\n        DropDown.clearItemsList()\r\n        DropDown.setItemsList(s)\r\n        reset()\r\n        dispatch(DragEdit())\r\n    }\r\n    return (\r\n        <div>\r\n            <div>\r\n                <Form onSubmit={handleSubmit(AddValue)}>\r\n                    <input type=\"text\" defaultValue={DropDown.getLabel()} placeholder={\"current value:\" + DropDown.getLabel().toString()} name=\"dropdownLabel\" ref={register({required: true})}/>\r\n                    <Container>\r\n                        <List >\r\n                            {DropDown.getItemsList().map((e,i)=>(\r\n                                <List.Item key={i} >\r\n                                    <Icon name='remove' onClick={()=>DeleteAnItemFromList(i)} color=\"blue\"/>\r\n                                    <List.Content>\r\n                                        {e}\r\n                                    </List.Content>\r\n\r\n                                </List.Item>\r\n                            ))}\r\n                        </List>\r\n                    </Container>\r\n                    <input ref={register({ required: true})} required name=\"val\" placeholder=\"Enter a value to add to list\"  />\r\n                    <input type=\"submit\"/>\r\n                </Form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport  const MemoDate=({item})=>{\r\n    const {register,handleSubmit}=useForm();\r\n    const dispatch=useDispatch();\r\n    const Date=item.getDate();\r\n    const Save=(e)=>{\r\n        Date.setLabel(e.date)\r\n        dispatch(DragEdit())\r\n    }\r\n    return(\r\n        <div>\r\n            <Form onSubmit={handleSubmit(Save)}>\r\n                <input type=\"text\" defaultValue={Date.getLabel()} placeholder={\"current value:\"+Date.getLabel().toString()}  name=\"date\" ref={register({required:true})}/>\r\n                <input type=\"submit\"/>\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport const MemoImage=({item})=>{\r\n    const {register,handleSubmit}=useForm();\r\n    const dispatch=useDispatch();\r\n    const nImage=item.getImage();\r\n    const Save=(e)=>{\r\n        item.getImage().setImagelabel(e.label);\r\n        item.getImage().setSize(e.size);\r\n        item.getImage().setIsRounded(e.rounded)\r\n        item.getImage().setIsCircular(e.circular)\r\n        dispatch(DragEdit())\r\n    }\r\n    return(\r\n        <div>\r\n            <Form onSubmit={handleSubmit(Save)}>\r\n                <input type=\"text\" defaultValue={nImage.getImagelabel()} placeholder={\"current value:\"+nImage.getImagelabel().toString()}  name=\"label\" ref={register({required:true})}/>\r\n                <select name=\"size\" ref={register({})}>\r\n                    <option>small </option>\r\n                    <option>mini </option>\r\n                    <option>tiny </option>\r\n                    <option>medium </option>\r\n                    <option>large </option>\r\n                    <option>big </option>\r\n                    <option>huge </option>\r\n                    <option>massive </option>\r\n                </select>\r\n                <input type=\"checkbox\" ref={register({})} name=\"rounded\"  defaultChecked={nImage.getIsRounded()}  />Rounded<br/>\r\n                <input type=\"checkbox\" ref={register({})} name=\"circular\" defaultChecked={nImage.getIsCircular()}   />Circular\r\n                <Image size={nImage.getSize()} src={nImage.getImageurl()} alt={nImage.getImagelabel()}/>\r\n                <input type=\"submit\"/>\r\n            </Form>\r\n        </div>\r\n    )\r\n}",["280","281"],"F:\\frontend\\dynamic_forms\\src\\Components\\CreateForms\\Fields\\ExceptionList.js",[],"F:\\frontend\\dynamic_forms\\src\\Components\\Redux\\CreatedForm\\reducers.js",[],"F:\\frontend\\dynamic_forms\\src\\Components\\Redux\\CreatedForm\\type.js",[],"F:\\frontend\\dynamic_forms\\src\\Components\\Redux\\CreatedForm\\actions.js",[],"F:\\frontend\\dynamic_forms\\src\\Components\\ModalReducer\\ModalReducer.js",[],"F:\\frontend\\dynamic_forms\\src\\Components\\CreateForms\\utils.jsx",[],"F:\\frontend\\dynamic_forms\\src\\Components\\Redux\\currentForm\\currentForm.jsx",[],"F:\\frontend\\dynamic_forms\\src\\Components\\CreateForms\\createdForm.js",["282","283"],"import React, {Component, memo, useEffect, useReducer, useState} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AddNewFormApiCAll, FetchCreatedFormAPICall,FetchBinaryDataApiCall} from \"../Redux/CreatedForm/actions\";\r\nimport {\r\n    List,\r\n    Grid,\r\n    Icon,\r\n    TransitionablePortal,\r\n    Form,\r\n    Modal,\r\n    Button,\r\n    FormInput,\r\n    Container,\r\n} from \"semantic-ui-react\";\r\nimport Segment from \"semantic-ui-react/dist/commonjs/elements/Segment\";\r\nimport { useForm,Controller } from \"react-hook-form\";\r\nimport {modalReducer} from \"../ModalReducer/ModalReducer\";\r\nimport Axios from \"../axiosConfig\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {CurrentForm} from \"../Redux/currentForm/currentForm\";\r\nimport {DeleteFormApiCall} from \"../Redux/DeleteForm/action\";\r\nimport {GetFormResponsesApiCall} from \"../Redux/GetFormReponses/reducers\";\r\n\r\n\r\n\r\n\r\nconst CreatedForm = () => {\r\n    const dispatch=useDispatch()\r\n    const data=useSelector(state=>state.createdForm)\r\n    const history=useHistory()\r\n    useEffect(()=> dispatch(FetchCreatedFormAPICall()),[])\r\n\r\n\r\n    return (\r\n        <Grid textAlign='center' verticalAlign='middle' >\r\n            <Grid.Column as={Segment} raised  style={{maxWidth:\"550px\",marginTop:70}}>\r\n        <Segment    fluid text  textAlign=\"center\" >\r\n            <List animated   >\r\n            {data.data.map(e=>(\r\n                <List.Item as={Container}  >\r\n                <List.Content floated=\"right\" >\r\n                    <Icon  name=\"edit\"\r\n                          onClick={()=>{\r\n                                dispatch(FetchBinaryDataApiCall({\"form_id\":e.form_id}))\r\n                                    .then(e=>{\r\n                                    dispatch(CurrentForm(e.data))\r\n                                    history.push(\"/createForm\")\r\n\r\n                                })\r\n                          }}  color=\"blue\" />\r\n                      <Copy access_id={e.access_id}/>\r\n                      <Button content=\"Click To See Responses\" icon=\"eye\" onClick={()=>{\r\n                           dispatch(GetFormResponsesApiCall({\"form_id\":e.form_id})).then().catch()\r\n                          history.push(\"/ViewFormResponses\")}}/>\r\n                    <DeleteFormModal dispatch={dispatch} id={e.form_id} name={e.name}/>\r\n                </List.Content>\r\n                <EditNameForms item={e}/>\r\n\r\n            </List.Item>))}\r\n\r\n            </List>\r\n            <CreateFormModal dispatch={dispatch}/>\r\n        </Segment>\r\n        </Grid.Column>\r\n        </Grid>\r\n    );\r\n};\r\nconst EditNameForms=memo(({item})=>{\r\n\r\n    const [isIconEdit,setisIconEdit]=useState(false)\r\n    const UpdateFormName=(data)=>{\r\n        data[\"name\"]=document.getElementById(\"newName\").value\r\n        Axios().patch(\"dynamicforms/updateName\",data).then(e=>console.log(e)).catch(e=>console.log(\"lool\",e))\r\n    }\r\n    return(\r\n        <List.Content  floated=\"left\"><Icon color=\"blue\" name=\"dot circle\"/>\r\n        {!isIconEdit? item.name:\r\n            <div>\r\n                <input id=\"newName\" style={{width:\"100px\",height:\"q20px\"}} type=\"text\"  placeholder={item.name} defaultValue={item.name}/>\r\n                 <Icon color={\"green\"} onClick={()=>{UpdateFormName({\"form_id\":item.form_id})}} name=\"save\"/></div>}\r\n                 {!isIconEdit ?\r\n                                (<Icon onClick={()=>{setisIconEdit(!isIconEdit)}} name=\"edit\"/>)\r\n                              : (<Icon  onClick={()=>setisIconEdit(!isIconEdit)} name=\"delete\" />)}\r\n\r\n        </List.Content>\r\n    )\r\n})\r\nexport default CreatedForm;\r\n\r\nconst CreateFormModal=({dispatch})=>{\r\n    const{register,handleSubmit,control}=useForm()\r\n    const[state,dispatches]=useReducer(modalReducer,{isOpen:false})\r\n     const create=(data)=>{\r\n        dispatch(AddNewFormApiCAll(data)).then(e=>dispatches({type:\"CLOSE\"})).catch(e=>{})\r\n    }\r\n    return(\r\n        <Modal size={\"tiny\"} trigger={ <Button   color=\"blue\"   circular icon={\"add\"} onClick={()=>dispatches({type:\"OPEN\"})} />} basic closeIcon  open={state.isOpen} onClose={()=>{dispatches({type:\"CLOSE\"})}}>\r\n            <Modal.Header>Enter the name for your form</Modal.Header>\r\n            <Form onSubmit={handleSubmit(create)}>\r\n                <Controller  control={control} as={FormInput} type=\"text\" name=\"name\" ref={register({required:{value:true,message:\"Required\"}})}/>\r\n            </Form>\r\n            <Modal.Content ><Button size={5} positive onClick={handleSubmit(create)}>\r\n                CREATE\r\n            </Button></Modal.Content>\r\n            <Modal.Actions >\r\n                <Button negative onClick={() => dispatches({ type: 'CLOSE' })}>\r\n                    CLOSE\r\n                </Button>\r\n            </Modal.Actions>\r\n        </Modal>\r\n\r\n    )\r\n}\r\n\r\nconst DeleteFormModal=({dispatch,id,name})=>{\r\n    const[state,dispatches]=useReducer(modalReducer,{isOpen:false})\r\n\r\n    return(\r\n        <Modal trigger={<Icon color=\"blue\" name=\"delete\" onClick={()=>{dispatches({type:\"OPEN\"})}} />} closeIcon   open={state.isOpen} onClose={()=>{dispatches({type:\"CLOSE\"})}}>\r\n        <Modal.Header>Are sure you wanna delete</Modal.Header>\r\n        <Modal.Description textAlign=\"center\">\r\n         <h1> {name}</h1>\r\n        </Modal.Description>\r\n        <Modal.Content>\r\n            <Button size={5} positive  onClick={()=>dispatch(DeleteFormApiCall({\"id\":id})).then(_=>{dispatches({type:\"CLOSE\"})} )} >\r\n           Confrim Delete\r\n        </Button></Modal.Content>\r\n    </Modal>)\r\n}\r\n\r\n\r\n\r\nconst  Copy= ({access_id}) =>{\r\n    function copyToClipboard(id){\r\n        let copy = document.createElement(\"input\");\r\n        document.body.appendChild(copy);\r\n        copy.setAttribute('value', id);\r\n        copy.select();\r\n        document.execCommand(\"copy\");\r\n        document.body.removeChild(copy);\r\n    }\r\n    const[state,dispatches]=useReducer(modalReducer,{isOpen:false})\r\n\r\n        return (\r\n\r\n                <TransitionablePortal\r\n                    trigger={<Icon color=\"blue\" name=\"clipboard\" onClick={()=>{dispatches({type:\"OPEN\"});copyToClipboard(access_id)}} />}\r\n                    onClose={()=>dispatches({type:\"CLOSE\"})}  open={state.isOpen}>\r\n                    <Segment style={{ left: '40%', position: 'fixed', top: '50%', zIndex: 1000 }}>\r\n                        Form Access Id Copied to Clipboard\r\n                    </Segment>\r\n                </TransitionablePortal>\r\n        )\r\n\r\n}","F:\\frontend\\dynamic_forms\\src\\Components\\RespondToForm\\RespondToForm.jsx",["284"],"import React, { memo,useReducer, useState} from 'react';\r\nimport {Button, Container, Divider, Form, FormInput, Grid, List, Modal, Segment} from 'semantic-ui-react'\r\nimport {useForm,Controller, FormProvider} from \"react-hook-form\";\r\nimport Axios from \"../axiosConfig\";\r\nimport {base64ToArrayBuffer} from \"../CreateForms/utils\";\r\nimport {ListPageForm} from \"../CreateForms/protobuf/Fields_pb\";\r\nimport {RenderProto} from \"../CreateForms/Fields/RenderFields\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {SetFormAccessId} from \"../Redux/RespondToForm/actions\";\r\nimport {modalReducer} from \"../ModalReducer/ModalReducer\";\r\n\r\n\r\nconst RespondToForm = () => {\r\n    const [PageForm,setPageForm]=useState([])\r\n    const {register,handleSubmit,errors,control}= useForm()\r\n    const state=useSelector(state=>state.respondToForm)\r\n    const dispatch=useDispatch()\r\n    const Search=(e)=>{\r\n        dispatch(SetFormAccessId({access_id:e.key}))\r\n        Axios().get(\"dynamicforms/AccessForm\", {\r\n            params: {\r\n                access_id: e.key,\r\n            }\r\n        }).then(e=>{\r\n            const data= base64ToArrayBuffer(e.data.data)\r\n            setPageForm(ListPageForm.deserializeBinary(data).getPageList())\r\n        }).catch(e=>{\r\n\r\n        })\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Grid textAlign=\"center\" verticalAlign=\"middle\">\r\n                <Grid.Column style={{ maxWidth: \"450px\" }} >\r\n                    <Container fluid textAlign={\"center\"} text>\r\n                <Form  onSubmit={handleSubmit(Search)}>\r\n                <Controller as={Form.Input} control={control}\r\n                            ref={register({required:{value:true,message:\"Please enter a valid id\"}})}\r\n                            name=\"key\"\r\n                            type=\"text\" placeholder=\"enter the form access-id\" />\r\n                    {errors[\"key\"] && errors[\"key\"].message}\r\n                <Form.Button  type={\"submit\"}  >Get</Form.Button>\r\n                 </Form></Container>\r\n                </Grid.Column>\r\n            </Grid>\r\n            <Grid textAlign=\"center\" verticalAlign=\"middle\" >\r\n                <Grid.Column style={{ maxWidth: \"900px\" }} text>\r\n                    {state.access_id!==null ? <FormDisplay  data={PageForm}/>:null}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default RespondToForm;\r\n\r\nconst FormDisplay=({data})=>{\r\n    const methods=useForm()\r\n    const state=useSelector(state=>state.respondToForm)\r\n    const[states,dispatches]=useReducer(modalReducer,{isOpen:false})\r\n    const[msg,setMsg]=useState(\"\")\r\n    const submit=(data)=> {\r\n        const _data = {\"access_id\": state.access_id, \"Responses\": data}\r\n\r\n        const list = Object.keys(data).filter(e => e.toString().includes('file'))\r\n        if (list.length !== 0) {\r\n            const formdata = new FormData();\r\n\r\n            list.forEach(e => {\r\n                formdata.append(e.toString(), data[e][0])\r\n            })\r\n            formdata.append(\"access_id\", state.access_id)\r\n\r\n            Axios().post(\"dynamicforms/saveFile\", formdata, {\r\n                    'Content-Type': 'multipart/form-data',\r\n                }\r\n            ).then(e => {\r\n                    const data = e.data[\"filepath\"]\r\n                    list.forEach(d => {\r\n                        _data.Responses[d] = data[d]\r\n                    })\r\n\r\n                    Axios().post(\"dynamicforms/SubmitResponse\", _data).then(e => {\r\n                        setMsg(\"submitted successFully\")\r\n                        dispatches({type: \"OPEN\"})\r\n                    }).catch(e => {\r\n                        setMsg(e.response.data['non_field_errors'])\r\n                        dispatches({type: \"OPEN\"})\r\n                    })\r\n                }\r\n            ).catch(e => {\r\n\r\n                    setMsg(e.response.data['non_field_errors'])\r\n                    dispatches({type: \"OPEN\"})\r\n                }\r\n            )\r\n\r\n\r\n        }\r\n        else {\r\n            Axios().post(\"dynamicforms/SubmitResponse\",_data).then(e=>{\r\n                setMsg(\"submitted successFully\")\r\n                dispatches({type:\"OPEN\"})\r\n            }).catch(e=>{\r\n                setMsg(e.response.data['non_field_errors'])\r\n                dispatches({type:\"OPEN\"})\r\n            })\r\n        }\r\n    }\r\n    return(\r\n        <FormProvider {...methods} >\r\n                    <Form  onSubmit={methods.handleSubmit(submit)} width={\"equal\"}>\r\n                        {data.map((e,i)=>(\r\n                            <FromFrame  data={e.getFieldsList()}/>\r\n                        ))}\r\n                        <Form.Button content=\"submit\" primary  />\r\n                    </Form>\r\n            <ErrorModal isOpen={states.isOpen} msg={msg} dispatches={dispatches} />\r\n        </FormProvider>\r\n    )\r\n}\r\n\r\nconst FromFrame=({data,})=>{\r\n    return(\r\n        <Segment>\r\n        <List>\r\n                {data.map((e,i)=>(\r\n                    <RenderEachItem item={e} key={i}/>\r\n                ))}\r\n        </List>\r\n        </Segment>\r\n    )\r\n}\r\n\r\nconst RenderEachItem=({item})=>{\r\n    const nRenderProto = new RenderProto();\r\n    const field = nRenderProto[String(item.getRenderFunc())](item);\r\n    return(\r\n        <List.Item as={Container}  textAlign=\"left\">\r\n            {field}\r\n            <Divider/>\r\n        </List.Item>\r\n\r\n    )\r\n}\r\n\r\nconst ErrorModal=memo(({isOpen,msg,dispatches})=>{\r\n    console.log(isOpen)\r\n    return(\r\n        <Modal size={\"tiny\"}   closeIcon  open={isOpen} onClose={()=>{dispatches({type:\"CLOSE\"})}}>\r\n            <Modal.Content >\r\n                {msg}\r\n            </Modal.Content>\r\n            <Modal.Actions >\r\n                <Button positive onClick={() => dispatches({ type: 'CLOSE' })}>\r\n                    ok\r\n                </Button>\r\n            </Modal.Actions>\r\n        </Modal>\r\n\r\n    )\r\n})\r\n\r\n","F:\\frontend\\dynamic_forms\\src\\Components\\Redux\\DeleteForm\\action.js",[],"F:\\frontend\\dynamic_forms\\src\\Components\\Redux\\DeleteForm\\reducer.js",[],"F:\\frontend\\dynamic_forms\\src\\Components\\Redux\\DeleteForm\\type.js",[],"F:\\frontend\\dynamic_forms\\src\\Components\\CreateForms\\Pager.jsx",["285","286"],"import React from 'react';\r\nimport {Button} from \"semantic-ui-react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {ListFields,ListPageForm} from './protobuf/Fields_pb'\r\nimport {uuidv4} from \"./utils\";\r\nimport {AddFormPage} from \"../Redux/DnDItems/action\";\r\nconst Pager = () => {\r\n    const dispatch=useDispatch()\r\n    const DnD=useSelector(state=>state.dnd)\r\n    const createNewPage=()=>{\r\n        const nListFields=new ListFields()\r\n        const id=uuidv4().toString();\r\n        nListFields.setFormid(id)\r\n        nListFields.setFieldsList([])\r\n        const data={\r\n            id:id,\r\n            page:nListFields\r\n        }\r\n        dispatch(AddFormPage(data))\r\n    }\r\n    return (\r\n        <div>\r\n         <Button icon=\"add\" onClick={()=>createNewPage()}  circular content=\"Add New Page\"/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Pager;\r\n","F:\\frontend\\dynamic_forms\\src\\Components\\Redux\\RespondToForm\\reducers.js",[],"F:\\frontend\\dynamic_forms\\src\\Components\\Redux\\RespondToForm\\type.js",[],"F:\\frontend\\dynamic_forms\\src\\Components\\Redux\\RespondToForm\\actions.js",[],"F:\\frontend\\dynamic_forms\\src\\Components\\FromResponses\\FormResponses.jsx",["287","288","289"],"import React, {useEffect} from 'react';\r\nimport {Table,Header,Rating} from \"semantic-ui-react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {ResetFormResponses} from \"../Redux/GetFormReponses/actions\";\r\n\r\nconst ViewFormResponses = () => {\r\n    const dispatch=useDispatch()\r\n    useEffect(()=>{\r\n        return ()=>{\r\n            dispatch(ResetFormResponses())\r\n        }\r\n    },[])\r\n     const state= useSelector(state=>state.getFromResponses)\r\n    return (\r\n        <div>\r\n            <h1>{state.name}</h1>\r\n\r\n            {state.list!==null&&state.list.length!==0 ? <TableView data={state.list}/>:null}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ViewFormResponses;\r\n\r\nconst TableView=({data})=>{\r\n       const array=[]\r\n     console.log(\"ss\",data)\r\n    for (const p in data[0])\r\n            if( data[0].hasOwnProperty(p) && p!==\"Responses\" )\r\n                array.push(p)\r\n\r\n    for(const p in data[0].Responses)\r\n        if(data[0].Responses.hasOwnProperty(p))\r\n            array.push(p)\r\n\r\n    return(\r\n        <Table stackable  sorted={true}>\r\n            <Table.Header>\r\n                <Table.Row>\r\n\r\n                    {array.map((e,i)=>(\r\n                        <Table.HeaderCell  key={i}>{e}</Table.HeaderCell>\r\n                    ))}\r\n                </Table.Row>\r\n            </Table.Header>\r\n\r\n            <Table.Body>\r\n\r\n                    {data.map((e,i)=>{\r\n\r\n                        return(\r\n                        <Table.Row>\r\n                            <Table.Cell>{e.MailName}</Table.Cell>\r\n                            {Object.values(e.Responses).map((e,i)=>(\r\n                                <Table.Cell>{e.toString()}</Table.Cell>\r\n                            ))}\r\n                        </Table.Row>\r\n\r\n                        )})}\r\n                </Table.Body>\r\n        </Table>\r\n    )\r\n}","F:\\frontend\\dynamic_forms\\src\\Components\\Redux\\GetFormReponses\\reducers.js",[],"F:\\frontend\\dynamic_forms\\src\\Components\\Redux\\GetFormReponses\\actions.js",[],"F:\\frontend\\dynamic_forms\\src\\Components\\Redux\\GetFormReponses\\type.js",[],"F:\\frontend\\dynamic_forms\\src\\Components\\Home\\Home.jsx",["290","291","292"],"import React, { useLayoutEffect, useRef, useState } from 'react'\r\nimport ScrollAnimation from 'react-animate-on-scroll';\r\nimport styles from './styles.module.css'\r\nimport {Container, List,Segment,Card, Grid, Header, Divider} from \"semantic-ui-react\";\r\nconst CreativeFormHome = () => {\r\n    return (\r\n        <div>\r\n           <div className={styles.homebackgroundImage}>\r\n            <Head />\r\n\r\n            <Container className={styles.subText}>\r\n              Create Your Own Forms\r\n            </Container>\r\n           </div>\r\n            <Features/>\r\n            <div style={{marginTop:50}}>\r\n            <ContentOne/>\r\n            <ContentTwo/>\r\n            <ContentThree/>\r\n            </div>\r\n            <MoreInfo/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CreativeFormHome;\r\n\r\n\r\nconst Head=()=>{\r\n    return(\r\n        <ScrollAnimation animateIn='flipInY'  animateOut='flipOutY'>\r\n            <h1 className={styles.charFade}>\r\n              Creative Forms\r\n            </h1>\r\n\r\n        </ScrollAnimation>\r\n\r\n    )\r\n}\r\n\r\nconst Features=()=>{\r\n\r\n    return(\r\n        <ScrollAnimation animateIn='slideInRight'  animateOut='slideOutLeft'>\r\n        <Grid  style={{marginTop:10,height:400}}>\r\n            <Grid.Row style={{marginLeft:60}} columns={3} textAlign=\"center\" verticalAlign=\"middle\">\r\n\r\n                <Grid.Column  >\r\n                    <Card   color={\"blue\"}>\r\n                        <Card.Content className={styles.gradientCard}>\r\n                     <Card.Header  >\r\n                         Future Design\r\n                         <Divider/>\r\n                     </Card.Header>\r\n\r\n                         --------------------------------------\r\n                         ----------------\r\n                         --------------------------------\r\n                         --------------------------------------\r\n                         ------------------\r\n                         --------------------------------------\r\n                     </Card.Content>\r\n                    </Card>\r\n                </Grid.Column>\r\n\r\n                <Grid.Column>\r\n                    <Card inverted>\r\n                        <Card.Content  className={styles.gradientCard}>\r\n                            <Card.Header style={{backgroundColor:\"#333\",color:\"white\"}} >\r\n                                Simple and Elegant\r\n                                <Divider/>\r\n                            </Card.Header>\r\n\r\n                            --------------------------------------\r\n                            ----------------\r\n                            --------------------------------\r\n                            --------------------------------------\r\n                            ------------------\r\n                            --------------------------------------\r\n                        </Card.Content>\r\n                    </Card>\r\n                </Grid.Column>\r\n                <Grid.Column>\r\n                    <Card inverted>\r\n                        <Card.Content  className={styles.gradientCard}>\r\n                            <Card.Header  style={{backgroundColor:\"#333\",color:\"white\"}}>\r\n                                Faster and Better\r\n                                <Divider/>\r\n                            </Card.Header>\r\n\r\n                            --------------------------------------\r\n                            ----------------\r\n                            --------------------------------\r\n                            --------------------------------------\r\n                            ------------------\r\n                            --------------------------------------\r\n                        </Card.Content>\r\n                    </Card>\r\n                </Grid.Column>\r\n            </Grid.Row>\r\n\r\n        </Grid>\r\n        </ScrollAnimation>\r\n    )\r\n}\r\n\r\nconst ContentOne=()=>{\r\n    return (\r\n        <ScrollAnimation animateIn=\"slideInUp\" animateOut='slideOutup'>\r\n            <Grid style={{backgroundColor: \"#ff4f85\", color: \"white\"}} stackable>\r\n\r\n                <Grid.Column width={10}>\r\n\r\n                    <Header style={{color: \"white\"}} size=\"huge\">\r\n                        One\r\n                    </Header>\r\n                    <Container className={styles.details}>\r\n                        The Department of computer science(SF) is one of the Self-Financing courses started in 2007. The\r\n                        Department also offering Post-Graduate Diploma Courses\r\n                        in Computer Application, Certificate Courses in Software Testing and Mobile Application\r\n                        Development. The Research activities are carried out in the area\r\n                        of Image proccessing, Data Mining, Pattern Recognition, Wireless Sensor Network, IoT,\r\n                        Bio-Infromation etc. Students are excellent in developing web, mobile\r\n                        and IoT applications, activly participating and won Laurels in Hackathon events and\r\n                        Intercollegiate meets at National and State level. Every year the Department\r\n                        is organising intercollegiate meet TECNEST, workshops and seminars on current trends.\r\n\r\n                    </Container>\r\n\r\n                    <Grid.Column width={6}>\r\n\r\n                    </Grid.Column>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </ScrollAnimation>\r\n    );\r\n}\r\n\r\nconst ContentTwo=()=>{\r\n    return(\r\n        <ScrollAnimation animateIn=\"slideInUp\" animateOut='fadeOut' >\r\n        <Grid  style={{backgroundColor:\"#0bdbf6\",color:\"white\"}}  stackable>\r\n            <Grid.Column width={6}>\r\n\r\n            </Grid.Column>\r\n            <Grid.Column width={10}>\r\n                <Header style={{color:\"white\"}} size=\"large\" >\r\n                    About the Department\r\n                </Header>\r\n                <Container className={styles.details} >\r\n                    The Department of computer science(SF) is one of the Self-Financing courses started in 2007. The Department also offering Post-Graduate Diploma Courses\r\n                    in Computer Application, Certificate Courses in Software Testing and Mobile Application Development. The Research activities are carried out in the area\r\n                    of Image proccessing, Data Mining, Pattern Recognition, Wireless Sensor Network, IoT, Bio-Infromation etc. Students are excellent in developing web, mobile\r\n                    and IoT applications, activly participating and won Laurels in Hackathon events and Intercollegiate meets at National and State level. Every year the Department\r\n                    is organising intercollegiate meet TECNEST, workshops and seminars on current trends.\r\n\r\n                </Container>\r\n            </Grid.Column>\r\n        </Grid>\r\n        </ScrollAnimation>\r\n    )\r\n}\r\n\r\nconst ContentThree=()=>{\r\n    return(\r\n        <ScrollAnimation animateIn=\"slideInUp\" animateOut='fadeOut' >\r\n        <Grid  style={{backgroundColor:\"#ff4f85\",color:\"white\"}}  stackable>\r\n\r\n            <Grid.Column width={10}>\r\n                <Header style={{color:\"white\"}} size=\"large\">\r\n                    About the Department\r\n                </Header>\r\n                <Container className={styles.details} >\r\n                    The Department of computer science(SF) is one of the Self-Financing courses started in 2007. The Department also offering Post-Graduate Diploma Courses\r\n                    in Computer Application, Certificate Courses in Software Testing and Mobile Application Development. The Research activities are carried out in the area\r\n                    of Image proccessing, Data Mining, Pattern Recognition, Wireless Sensor Network, IoT, Bio-Infromation etc. Students are excellent in developing web, mobile\r\n                    and IoT applications, activly participating and won Laurels in Hackathon events and Intercollegiate meets at National and State level. Every year the Department\r\n                    is organising intercollegiate meet TECNEST, workshops and seminars on current trends.\r\n\r\n                </Container>\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n\r\n            </Grid.Column>\r\n        </Grid>\r\n\r\n        </ScrollAnimation>\r\n    )\r\n}\r\n\r\nconst MoreInfo=()=>{\r\n    return(\r\n        <Segment inverted vertical style={{ padding: '5em 0em' }}>\r\n            <Container>\r\n                <Grid divided inverted stackable>\r\n                    <Grid.Row>\r\n                        <Grid.Column width={3}>\r\n                            <Header inverted as='h4' content='About' />\r\n                            <List link inverted>\r\n                                <List.Item as='a'>Sitemap</List.Item>\r\n                                <List.Item as='a'>Contact Us</List.Item>\r\n                                <List.Item as='a'>Religious Ceremonies</List.Item>\r\n                                <List.Item as='a'>Gazebo Plans</List.Item>\r\n                            </List>\r\n                        </Grid.Column>\r\n                        <Grid.Column width={3}>\r\n                            <Header inverted as='h4' content='Services' />\r\n                            <List link inverted>\r\n                                <List.Item as='a'>Banana Pre-Order</List.Item>\r\n                                <List.Item as='a'>DNA FAQ</List.Item>\r\n                                <List.Item as='a'>How To Access</List.Item>\r\n                                <List.Item as='a'>Favorite X-Men</List.Item>\r\n                            </List>\r\n                        </Grid.Column>\r\n                        <Grid.Column width={7}>\r\n                            <Header as='h4' inverted>\r\n                                Footer Header\r\n                            </Header>\r\n                            <p>\r\n                                Extra space for a call to action inside the footer that could help re-engage users.\r\n                            </p>\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                </Grid>\r\n            </Container>\r\n        </Segment>\r\n    )\r\n}","F:\\frontend\\dynamic_forms\\src\\Components\\FileUploadHandle\\FileUploadHandle.js",[],{"ruleId":"293","replacedBy":"294"},{"ruleId":"295","replacedBy":"296"},{"ruleId":"297","severity":1,"message":"298","line":3,"column":61,"nodeType":"299","messageId":"300","endLine":3,"endColumn":67},{"ruleId":"297","severity":1,"message":"301","line":25,"column":11,"nodeType":"299","messageId":"300","endLine":25,"endColumn":16},{"ruleId":"297","severity":1,"message":"302","line":26,"column":11,"nodeType":"299","messageId":"300","endLine":26,"endColumn":19},{"ruleId":"297","severity":1,"message":"303","line":5,"column":20,"nodeType":"299","messageId":"300","endLine":5,"endColumn":25},{"ruleId":"297","severity":1,"message":"304","line":11,"column":5,"nodeType":"299","messageId":"300","endLine":11,"endColumn":16},{"ruleId":"297","severity":1,"message":"305","line":13,"column":9,"nodeType":"299","messageId":"300","endLine":13,"endColumn":19},{"ruleId":"297","severity":1,"message":"306","line":16,"column":19,"nodeType":"299","messageId":"300","endLine":16,"endColumn":33},{"ruleId":"297","severity":1,"message":"307","line":16,"column":49,"nodeType":"299","messageId":"300","endLine":16,"endColumn":59},{"ruleId":"308","severity":1,"message":"309","line":40,"column":8,"nodeType":"310","endLine":40,"endColumn":10,"suggestions":"311"},{"ruleId":"312","severity":1,"message":"313","line":121,"column":29,"nodeType":"314","endLine":121,"endColumn":65},{"ruleId":"315","severity":1,"message":"316","line":23,"column":28,"nodeType":"317","messageId":"318","endLine":23,"endColumn":40},{"ruleId":"297","severity":1,"message":"319","line":2,"column":9,"nodeType":"299","messageId":"300","endLine":2,"endColumn":17},{"ruleId":"297","severity":1,"message":"320","line":2,"column":25,"nodeType":"299","messageId":"300","endLine":2,"endColumn":37},{"ruleId":"297","severity":1,"message":"321","line":2,"column":53,"nodeType":"299","messageId":"300","endLine":2,"endColumn":58},{"ruleId":"297","severity":1,"message":"322","line":2,"column":60,"nodeType":"299","messageId":"300","endLine":2,"endColumn":67},{"ruleId":"323","severity":1,"message":"324","line":56,"column":9,"nodeType":"325","messageId":"326","endLine":64,"endColumn":10},{"ruleId":"297","severity":1,"message":"327","line":1,"column":8,"nodeType":"299","messageId":"300","endLine":1,"endColumn":13},{"ruleId":"297","severity":1,"message":"328","line":1,"column":17,"nodeType":"299","messageId":"300","endLine":1,"endColumn":21},{"ruleId":"297","severity":1,"message":"329","line":1,"column":22,"nodeType":"299","messageId":"300","endLine":1,"endColumn":32},{"ruleId":"293","replacedBy":"330"},{"ruleId":"295","replacedBy":"331"},{"ruleId":"297","severity":1,"message":"332","line":1,"column":16,"nodeType":"299","messageId":"300","endLine":1,"endColumn":25},{"ruleId":"308","severity":1,"message":"333","line":31,"column":56,"nodeType":"310","endLine":31,"endColumn":58,"suggestions":"334"},{"ruleId":"297","severity":1,"message":"335","line":2,"column":43,"nodeType":"299","messageId":"300","endLine":2,"endColumn":52},{"ruleId":"297","severity":1,"message":"336","line":4,"column":20,"nodeType":"299","messageId":"300","endLine":4,"endColumn":32},{"ruleId":"297","severity":1,"message":"337","line":9,"column":11,"nodeType":"299","messageId":"300","endLine":9,"endColumn":14},{"ruleId":"297","severity":1,"message":"338","line":2,"column":15,"nodeType":"299","messageId":"300","endLine":2,"endColumn":21},{"ruleId":"297","severity":1,"message":"339","line":2,"column":22,"nodeType":"299","messageId":"300","endLine":2,"endColumn":28},{"ruleId":"308","severity":1,"message":"333","line":12,"column":7,"nodeType":"310","endLine":12,"endColumn":9,"suggestions":"340"},{"ruleId":"297","severity":1,"message":"341","line":1,"column":17,"nodeType":"299","messageId":"300","endLine":1,"endColumn":32},{"ruleId":"297","severity":1,"message":"342","line":1,"column":34,"nodeType":"299","messageId":"300","endLine":1,"endColumn":40},{"ruleId":"297","severity":1,"message":"343","line":1,"column":42,"nodeType":"299","messageId":"300","endLine":1,"endColumn":50},"no-native-reassign",["344"],"no-negated-in-lhs",["345"],"no-unused-vars","'Loader' is defined but never used.","Identifier","unusedVar","'sdata' is assigned a value but never used.","'dispatch' is assigned a value but never used.","'Pages' is defined but never used.","'SetDragItem' is defined but never used.","'ListFields' is defined but never used.","'useFormContext' is defined but never used.","'Controller' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'currentForm.bindata' and 'dispatch'. Either include them or remove the dependency array.","ArrayExpression",["346"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-new-wrappers","Do not use Number as a constructor.","NewExpression","noConstructor","'Checkbox' is defined but never used.","'FormCheckbox' is defined but never used.","'Radio' is defined but never used.","'Segment' is defined but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'React' is defined but never used.","'memo' is defined but never used.","'useReducer' is defined but never used.",["344"],["345"],"'Component' is defined but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["347"],"'FormInput' is defined but never used.","'ListPageForm' is defined but never used.","'DnD' is assigned a value but never used.","'Header' is defined but never used.","'Rating' is defined but never used.",["348"],"'useLayoutEffect' is defined but never used.","'useRef' is defined but never used.","'useState' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"349","fix":"350"},{"desc":"351","fix":"352"},{"desc":"351","fix":"353"},"Update the dependencies array to be: [currentForm.bindata, dispatch]",{"range":"354","text":"355"},"Update the dependencies array to be: [dispatch]",{"range":"356","text":"357"},{"range":"358","text":"357"},[1457,1459],"[currentForm.bindata, dispatch]",[1100,1102],"[dispatch]",[397,399]]